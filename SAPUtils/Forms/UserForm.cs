using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Xml;
using SAPbouiCOM;
using SAPbouiCOM.Framework;
using SAPUtils.Utils;
using Application = SAPbouiCOM.Application;
using Company = SAPbobsCOM.Company;
using ProgressBar = SAPbouiCOM.ProgressBar;

namespace SAPUtils.Forms {
    /// <summary>
    /// Base class for SAP Business One user forms that provides common functionality and integration with the SAP UI API.
    /// </summary>
    [SuppressMessage("ReSharper", "MemberCanBePrivate.Global")]
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    public abstract partial class UserForm : FormBase {


        private static volatile ProgressBar progressBar;

        /// <summary>
        /// Base class for SAP Business One user forms that provides common functionality
        /// and integration with the SAP UI API.
        /// </summary>
        /// <param name="manualUid">Optional unique identifier for the form. If provided, it overrides the default UID generated by the form.</param>
        /// <remarks>
        /// This class serves as a foundation for custom user forms within the SAP Business One
        /// environment. It simplifies common tasks such as form initialization, logging, and integration
        /// with the SAP system.
        /// </remarks>
        /// <seealso cref="SAPUtils.SapAddon"/>
        /// <seealso cref="SAPUtils.Utils.ILogger"/>
        protected UserForm(string manualUid = null) {
            Logger.Debug("Starting UserForm construction");
            try {
                ShowWaitCursor();
                LoadForm(manualUid);
                if (!Alive) return;

                // ReSharper disable once VirtualMemberCallInConstructor
                OnInitializeComponent();
                InitializedSetter = true;
                Logger.Info("UserForm successfully initialized");
            }
            catch (Exception ex) {
                Logger.Error("Error during UserForm initialization: {0}", ex);
                throw;
            }
            finally {
                ShowArrowCursor();
            }

        }

        /// <summary>
        /// Gets the current SAP Business One Company instance.
        /// </summary>
        [SuppressMessage("ReSharper", "MemberCanBeMadeStatic.Global")]
        protected Company Company => SapAddon.Instance().Company;

        /// <summary>
        /// Gets the current SAP Business One Application instance.
        /// </summary>
        // ReSharper disable once MemberCanBeMadeStatic.Global
        protected Application Application => SapAddon.Instance().Application;

        /// <summary>
        /// Logger instance for recording form-related events and errors.
        /// </summary>
        // ReSharper disable once MemberCanBeMadeStatic.Global
        protected ILogger Logger => SapAddon.Instance().Logger;

        /// <summary>
        /// Loads an XML-based form definition into the SAP Business One application environment.
        /// </summary>
        /// <param name="manualUid">Optional unique identifier for the form. If provided, it overrides the default UID generated by the form.</param>
        /// <exception cref="InvalidDataException">Thrown if the form XML is invalid or does not contain a valid form node.</exception>
        /// <exception cref="Exception">Thrown if an error occurs during form loading.</exception>
        /// <seealso cref="SAPbouiCOM.Framework.Application" />
        private void LoadForm(string manualUid = null) {
            Logger.Debug("Starting form loading");
            try {
                string formPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, FormResource);
                Logger.Trace("Loading form file from: {0}", formPath);

                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.Load(formPath);

                XmlNode formNode = xmlDoc.SelectSingleNode("//form");
                if (formNode == null) {
                    Logger.Error("Form node not found in XML file");
                    throw new InvalidDataException("Form is not valid");
                }

                if (formNode.Attributes == null) {
                    Logger.Warning("Form node has no attributes");
                    return;
                }

                formNode.Attributes["FormType"].Value = FormType;
                Logger.Trace("Form type set to: {0}", FormType);

                string uidValue = manualUid;
                XmlAttribute attrb = formNode.Attributes?["uid"];
                if (attrb != null) {
                    if (uidValue == null) {
                        uidValue = formNode.Attributes["uid"].Value;
                    }
                    if (!string.IsNullOrEmpty(uidValue) && FormUtils.ExistForm(uidValue, Application)) {
                        Logger.Trace("Closing existing form with UID: {0}", uidValue);
                        Application.Forms.Item(uidValue).Close();
                        if (FormUtils.ExistForm(uidValue, Application)) {
                            Logger.Info("No se pudo cerrar el formulario {0}", uidValue);
                            return;
                        }
                    }
                    else if (string.IsNullOrEmpty(uidValue)) {
                        uidValue = Guid.NewGuid().ToString("N").Substring(0, 10);
                        formNode.Attributes["uid"].Value = uidValue;
                        Logger.Debug("New UID generated for form: {0}", uidValue);
                    }
                }
                else if (uidValue != null) {

                    if (!string.IsNullOrEmpty(uidValue) && FormUtils.ExistForm(uidValue, Application)) {
                        Logger.Trace("Closing existing form with UID: {0}", uidValue);
                        Application.Forms.Item(uidValue).Close();
                        if (FormUtils.ExistForm(uidValue, Application)) {
                            Logger.Info("No se pudo cerrar el formulario {0}", uidValue);
                            return;
                        }
                    }
                    attrb = xmlDoc.CreateAttribute("uid");
                    attrb.Value = uidValue;
                    formNode.Attributes?.Append(attrb);
                    Logger.Debug("Created and assigned new UID attribute: {0}", uidValue);
                }
                Logger.Trace("Loading batch actions into application");
                Application.LoadBatchActions(xmlDoc.InnerXml);
                Logger.Info("Form loaded successfully");
            }
            catch (Exception ex) {
                Logger.Error("Error during form loading: {0}", ex);
                throw;
            }
        }

        /// <summary>
        /// Shows the form if it is alive (initialized and valid).
        /// If the form is not alive, the operation is logged and ignored.
        /// </summary>
        public void Show() {
            Logger.Trace("Attempting to show form");
            if (!Alive) {
                Logger.Warning("Cannot show form because it is not alive");
                return;
            }
            UIAPIRawForm.Visible = true;
            Logger.Trace("Form displayed successfully");
        }

        /// <summary>
        /// Displays a custom message box using the SAP Business One UI API with configurable buttons and default option.
        /// </summary>
        /// <param name="text">The message text to display in the message box.</param>
        /// <param name="defaultButton">The button to be set as default (e.g., 1 for the first button, 2 for the second, etc.).</param>
        /// <param name="btn1Caption">Caption for the first button. Defaults to "OK".</param>
        /// <param name="btn2Caption">Optional caption for the second button. If empty, the button is hidden.</param>
        /// <param name="btn3Caption">Optional caption for the third button. If empty, the button is hidden.</param>
        /// <returns>
        /// The value of the pressed button (e.g., 1 for the first button, 2 for the second, etc.).
        /// </returns>
        /// <seealso cref="SAPbouiCOM.Application"/>
        protected int ShowMessageBox(string text, int defaultButton = 1, string btn1Caption = "OK", string btn2Caption = "", string btn3Caption = "") {
            return Application.MessageBox(text, defaultButton, btn1Caption, btn2Caption, btn3Caption);
        }

        /// <summary>
        /// Displays a status bar message in the SAP Business One application.
        /// </summary>
        /// <param name="text">The message text to display in the status bar.</param>
        /// <param name="seconds">The duration (in enumeration format) for which the message will appear on the screen.</param>
        /// <param name="type">The type of status message, such as error, warning, or success.</param>
        /// <seealso cref="SAPbouiCOM.Application"/>
        protected void SetStatusBarMessage(string text, BoMessageTime seconds = BoMessageTime.bmt_Medium, BoStatusBarMessageType type = BoStatusBarMessageType.smt_Error) {
            Application.StatusBar.SetText(text, seconds, type);
        }

        protected void ShowWaitCursor() {
            if (progressBar != null) return;
            try {
                progressBar = Application.StatusBar.CreateProgressBar("Cargando...", 100, false);
                progressBar.Value = 99;
            }
            catch {
                // ignored
            }
        }

        protected void ShowArrowCursor() {
            if (progressBar == null) return;
            try {
                progressBar.Value = 100;
                progressBar.Stop();
            }
            catch {
                // ignored
            }
            progressBar = null;
            GC.Collect();
        }
    }
}